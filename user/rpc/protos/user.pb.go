// Code generated by protoc-gen-go. DO NOT EDIT.
// source: user.proto

package user

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type FindUserByMobileRequest struct {
	Mobile               string   `protobuf:"bytes,1,opt,name=mobile,proto3" json:"mobile,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindUserByMobileRequest) Reset()         { *m = FindUserByMobileRequest{} }
func (m *FindUserByMobileRequest) String() string { return proto.CompactTextString(m) }
func (*FindUserByMobileRequest) ProtoMessage()    {}
func (*FindUserByMobileRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{0}
}

func (m *FindUserByMobileRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindUserByMobileRequest.Unmarshal(m, b)
}
func (m *FindUserByMobileRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindUserByMobileRequest.Marshal(b, m, deterministic)
}
func (m *FindUserByMobileRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUserByMobileRequest.Merge(m, src)
}
func (m *FindUserByMobileRequest) XXX_Size() int {
	return xxx_messageInfo_FindUserByMobileRequest.Size(m)
}
func (m *FindUserByMobileRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUserByMobileRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindUserByMobileRequest proto.InternalMessageInfo

func (m *FindUserByMobileRequest) GetMobile() string {
	if m != nil {
		return m.Mobile
	}
	return ""
}

type FindUserByIdRequest struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindUserByIdRequest) Reset()         { *m = FindUserByIdRequest{} }
func (m *FindUserByIdRequest) String() string { return proto.CompactTextString(m) }
func (*FindUserByIdRequest) ProtoMessage()    {}
func (*FindUserByIdRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{1}
}

func (m *FindUserByIdRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindUserByIdRequest.Unmarshal(m, b)
}
func (m *FindUserByIdRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindUserByIdRequest.Marshal(b, m, deterministic)
}
func (m *FindUserByIdRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindUserByIdRequest.Merge(m, src)
}
func (m *FindUserByIdRequest) XXX_Size() int {
	return xxx_messageInfo_FindUserByIdRequest.Size(m)
}
func (m *FindUserByIdRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindUserByIdRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindUserByIdRequest proto.InternalMessageInfo

func (m *FindUserByIdRequest) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

type UserResponse struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserResponse) Reset()         { *m = UserResponse{} }
func (m *UserResponse) String() string { return proto.CompactTextString(m) }
func (*UserResponse) ProtoMessage()    {}
func (*UserResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_116e343673f7ffaf, []int{2}
}

func (m *UserResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserResponse.Unmarshal(m, b)
}
func (m *UserResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserResponse.Marshal(b, m, deterministic)
}
func (m *UserResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserResponse.Merge(m, src)
}
func (m *UserResponse) XXX_Size() int {
	return xxx_messageInfo_UserResponse.Size(m)
}
func (m *UserResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserResponse proto.InternalMessageInfo

func (m *UserResponse) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *UserResponse) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*FindUserByMobileRequest)(nil), "FindUserByMobileRequest")
	proto.RegisterType((*FindUserByIdRequest)(nil), "FindUserByIdRequest")
	proto.RegisterType((*UserResponse)(nil), "UserResponse")
}

func init() { proto.RegisterFile("user.proto", fileDescriptor_116e343673f7ffaf) }

var fileDescriptor_116e343673f7ffaf = []byte{
	// 174 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x2a, 0x2d, 0x4e, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x32, 0xe4, 0x12, 0x77, 0xcb, 0xcc, 0x4b, 0x09, 0x2d,
	0x4e, 0x2d, 0x72, 0xaa, 0xf4, 0xcd, 0x4f, 0xca, 0xcc, 0x49, 0x0d, 0x4a, 0x2d, 0x2c, 0x4d, 0x2d,
	0x2e, 0x11, 0x12, 0xe3, 0x62, 0xcb, 0x05, 0x0b, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x70, 0x06, 0x41,
	0x79, 0x4a, 0xaa, 0x5c, 0xc2, 0x08, 0x2d, 0x9e, 0x29, 0x30, 0xe5, 0x7c, 0x5c, 0x4c, 0x99, 0x29,
	0x60, 0xa5, 0xac, 0x41, 0x4c, 0x99, 0x29, 0x4a, 0x46, 0x5c, 0x3c, 0x20, 0x25, 0x41, 0xa9, 0xc5,
	0x05, 0xf9, 0x79, 0xc5, 0xa9, 0xe8, 0xf2, 0x42, 0x42, 0x5c, 0x2c, 0x79, 0x89, 0xb9, 0xa9, 0x12,
	0x4c, 0x60, 0xc3, 0xc1, 0x6c, 0xa3, 0x6a, 0x2e, 0x76, 0xb0, 0x9e, 0x82, 0x64, 0x21, 0x6b, 0x2e,
	0x01, 0x74, 0x87, 0x09, 0x49, 0xe8, 0xe1, 0x70, 0xab, 0x14, 0xaf, 0x1e, 0x8a, 0x5d, 0xc6, 0x5c,
	0x3c, 0xc8, 0x4e, 0x14, 0x12, 0xd1, 0xc3, 0xe2, 0x62, 0x34, 0x4d, 0x49, 0x6c, 0xe0, 0x10, 0x31,
	0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0x45, 0x3e, 0x47, 0xf5, 0x1f, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// UserRpcClient is the client API for UserRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type UserRpcClient interface {
	FindUserByMobile(ctx context.Context, in *FindUserByMobileRequest, opts ...grpc.CallOption) (*UserResponse, error)
	FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*UserResponse, error)
}

type userRpcClient struct {
	cc *grpc.ClientConn
}

func NewUserRpcClient(cc *grpc.ClientConn) UserRpcClient {
	return &userRpcClient{cc}
}

func (c *userRpcClient) FindUserByMobile(ctx context.Context, in *FindUserByMobileRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UserRpc/FindUserByMobile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userRpcClient) FindUserById(ctx context.Context, in *FindUserByIdRequest, opts ...grpc.CallOption) (*UserResponse, error) {
	out := new(UserResponse)
	err := c.cc.Invoke(ctx, "/UserRpc/FindUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserRpcServer is the server API for UserRpc service.
type UserRpcServer interface {
	FindUserByMobile(context.Context, *FindUserByMobileRequest) (*UserResponse, error)
	FindUserById(context.Context, *FindUserByIdRequest) (*UserResponse, error)
}

// UnimplementedUserRpcServer can be embedded to have forward compatible implementations.
type UnimplementedUserRpcServer struct {
}

func (*UnimplementedUserRpcServer) FindUserByMobile(ctx context.Context, req *FindUserByMobileRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserByMobile not implemented")
}
func (*UnimplementedUserRpcServer) FindUserById(ctx context.Context, req *FindUserByIdRequest) (*UserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindUserById not implemented")
}

func RegisterUserRpcServer(s *grpc.Server, srv UserRpcServer) {
	s.RegisterService(&_UserRpc_serviceDesc, srv)
}

func _UserRpc_FindUserByMobile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByMobileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserByMobile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserRpc/FindUserByMobile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserByMobile(ctx, req.(*FindUserByMobileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserRpc_FindUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindUserByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserRpcServer).FindUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UserRpc/FindUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserRpcServer).FindUserById(ctx, req.(*FindUserByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _UserRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "UserRpc",
	HandlerType: (*UserRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FindUserByMobile",
			Handler:    _UserRpc_FindUserByMobile_Handler,
		},
		{
			MethodName: "FindUserById",
			Handler:    _UserRpc_FindUserById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
