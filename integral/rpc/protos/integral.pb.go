// Code generated by protoc-gen-go. DO NOT EDIT.
// source: integral.proto

package integral

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

//protoc --go_out=plugins=grpc:. integral.proto
type IntegralRequest struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Integral             int64    `protobuf:"varint,2,opt,name=integral,proto3" json:"integral,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegralRequest) Reset()         { *m = IntegralRequest{} }
func (m *IntegralRequest) String() string { return proto.CompactTextString(m) }
func (*IntegralRequest) ProtoMessage()    {}
func (*IntegralRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d836c8d70e1b53, []int{0}
}

func (m *IntegralRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegralRequest.Unmarshal(m, b)
}
func (m *IntegralRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegralRequest.Marshal(b, m, deterministic)
}
func (m *IntegralRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegralRequest.Merge(m, src)
}
func (m *IntegralRequest) XXX_Size() int {
	return xxx_messageInfo_IntegralRequest.Size(m)
}
func (m *IntegralRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegralRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IntegralRequest proto.InternalMessageInfo

func (m *IntegralRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *IntegralRequest) GetIntegral() int64 {
	if m != nil {
		return m.Integral
	}
	return 0
}

type IntegralResponse struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	Integral             int64    `protobuf:"varint,2,opt,name=integral,proto3" json:"integral,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IntegralResponse) Reset()         { *m = IntegralResponse{} }
func (m *IntegralResponse) String() string { return proto.CompactTextString(m) }
func (*IntegralResponse) ProtoMessage()    {}
func (*IntegralResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d836c8d70e1b53, []int{1}
}

func (m *IntegralResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_IntegralResponse.Unmarshal(m, b)
}
func (m *IntegralResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_IntegralResponse.Marshal(b, m, deterministic)
}
func (m *IntegralResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IntegralResponse.Merge(m, src)
}
func (m *IntegralResponse) XXX_Size() int {
	return xxx_messageInfo_IntegralResponse.Size(m)
}
func (m *IntegralResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IntegralResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IntegralResponse proto.InternalMessageInfo

func (m *IntegralResponse) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *IntegralResponse) GetIntegral() int64 {
	if m != nil {
		return m.Integral
	}
	return 0
}

type FindIntegralRequest struct {
	UserId               int32    `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *FindIntegralRequest) Reset()         { *m = FindIntegralRequest{} }
func (m *FindIntegralRequest) String() string { return proto.CompactTextString(m) }
func (*FindIntegralRequest) ProtoMessage()    {}
func (*FindIntegralRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d3d836c8d70e1b53, []int{2}
}

func (m *FindIntegralRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_FindIntegralRequest.Unmarshal(m, b)
}
func (m *FindIntegralRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_FindIntegralRequest.Marshal(b, m, deterministic)
}
func (m *FindIntegralRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_FindIntegralRequest.Merge(m, src)
}
func (m *FindIntegralRequest) XXX_Size() int {
	return xxx_messageInfo_FindIntegralRequest.Size(m)
}
func (m *FindIntegralRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_FindIntegralRequest.DiscardUnknown(m)
}

var xxx_messageInfo_FindIntegralRequest proto.InternalMessageInfo

func (m *FindIntegralRequest) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func init() {
	proto.RegisterType((*IntegralRequest)(nil), "IntegralRequest")
	proto.RegisterType((*IntegralResponse)(nil), "IntegralResponse")
	proto.RegisterType((*FindIntegralRequest)(nil), "FindIntegralRequest")
}

func init() { proto.RegisterFile("integral.proto", fileDescriptor_d3d836c8d70e1b53) }

var fileDescriptor_d3d836c8d70e1b53 = []byte{
	// 178 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0xcb, 0xcc, 0x2b, 0x49,
	0x4d, 0x2f, 0x4a, 0xcc, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x57, 0x72, 0xe5, 0xe2, 0xf7, 0x84,
	0x8a, 0x04, 0xa5, 0x16, 0x96, 0xa6, 0x16, 0x97, 0x08, 0x89, 0x71, 0xb1, 0x95, 0x16, 0xa7, 0x16,
	0x79, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0xb0, 0x06, 0x41, 0x79, 0x42, 0x52, 0x5c, 0x1c, 0x30,
	0xcd, 0x12, 0x4c, 0x0a, 0x8c, 0x1a, 0xcc, 0x41, 0x70, 0xbe, 0x92, 0x1b, 0x97, 0x00, 0xc2, 0x98,
	0xe2, 0x82, 0xfc, 0xbc, 0xe2, 0x54, 0xb2, 0xcc, 0xd1, 0xe5, 0x12, 0x76, 0xcb, 0xcc, 0x4b, 0x21,
	0xd2, 0x49, 0x46, 0xbb, 0x18, 0xb9, 0xb8, 0xe1, 0x6a, 0x0b, 0x92, 0x85, 0x8c, 0xb8, 0xb8, 0x1d,
	0x53, 0xe0, 0xba, 0x85, 0x04, 0xf4, 0xd0, 0x0c, 0x92, 0x12, 0xd4, 0xc3, 0x70, 0xa6, 0x19, 0x17,
	0xbf, 0x73, 0x7e, 0x5e, 0x71, 0x69, 0x6e, 0x2a, 0x69, 0xfa, 0xec, 0xb9, 0x44, 0x90, 0x9d, 0xea,
	0x54, 0x19, 0x5a, 0x9c, 0x5a, 0x94, 0x99, 0x22, 0x24, 0xa2, 0x87, 0xc5, 0x07, 0x58, 0x0c, 0x48,
	0x62, 0x03, 0xc7, 0x80, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0x49, 0x88, 0x68, 0x9a, 0x93, 0x01,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// IntegralRpcClient is the client API for IntegralRpc service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IntegralRpcClient interface {
	AddIntegral(ctx context.Context, in *IntegralRequest, opts ...grpc.CallOption) (*IntegralResponse, error)
	ConsumeIntegral(ctx context.Context, in *IntegralRequest, opts ...grpc.CallOption) (*IntegralResponse, error)
	FindIntegralByUserid(ctx context.Context, in *FindIntegralRequest, opts ...grpc.CallOption) (*IntegralResponse, error)
}

type integralRpcClient struct {
	cc *grpc.ClientConn
}

func NewIntegralRpcClient(cc *grpc.ClientConn) IntegralRpcClient {
	return &integralRpcClient{cc}
}

func (c *integralRpcClient) AddIntegral(ctx context.Context, in *IntegralRequest, opts ...grpc.CallOption) (*IntegralResponse, error) {
	out := new(IntegralResponse)
	err := c.cc.Invoke(ctx, "/IntegralRpc/AddIntegral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralRpcClient) ConsumeIntegral(ctx context.Context, in *IntegralRequest, opts ...grpc.CallOption) (*IntegralResponse, error) {
	out := new(IntegralResponse)
	err := c.cc.Invoke(ctx, "/IntegralRpc/ConsumeIntegral", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *integralRpcClient) FindIntegralByUserid(ctx context.Context, in *FindIntegralRequest, opts ...grpc.CallOption) (*IntegralResponse, error) {
	out := new(IntegralResponse)
	err := c.cc.Invoke(ctx, "/IntegralRpc/FindIntegralByUserid", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IntegralRpcServer is the server API for IntegralRpc service.
type IntegralRpcServer interface {
	AddIntegral(context.Context, *IntegralRequest) (*IntegralResponse, error)
	ConsumeIntegral(context.Context, *IntegralRequest) (*IntegralResponse, error)
	FindIntegralByUserid(context.Context, *FindIntegralRequest) (*IntegralResponse, error)
}

// UnimplementedIntegralRpcServer can be embedded to have forward compatible implementations.
type UnimplementedIntegralRpcServer struct {
}

func (*UnimplementedIntegralRpcServer) AddIntegral(ctx context.Context, req *IntegralRequest) (*IntegralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddIntegral not implemented")
}
func (*UnimplementedIntegralRpcServer) ConsumeIntegral(ctx context.Context, req *IntegralRequest) (*IntegralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConsumeIntegral not implemented")
}
func (*UnimplementedIntegralRpcServer) FindIntegralByUserid(ctx context.Context, req *FindIntegralRequest) (*IntegralResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindIntegralByUserid not implemented")
}

func RegisterIntegralRpcServer(s *grpc.Server, srv IntegralRpcServer) {
	s.RegisterService(&_IntegralRpc_serviceDesc, srv)
}

func _IntegralRpc_AddIntegral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegralRpcServer).AddIntegral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IntegralRpc/AddIntegral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegralRpcServer).AddIntegral(ctx, req.(*IntegralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegralRpc_ConsumeIntegral_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IntegralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegralRpcServer).ConsumeIntegral(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IntegralRpc/ConsumeIntegral",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegralRpcServer).ConsumeIntegral(ctx, req.(*IntegralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _IntegralRpc_FindIntegralByUserid_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindIntegralRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IntegralRpcServer).FindIntegralByUserid(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/IntegralRpc/FindIntegralByUserid",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IntegralRpcServer).FindIntegralByUserid(ctx, req.(*FindIntegralRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _IntegralRpc_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IntegralRpc",
	HandlerType: (*IntegralRpcServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddIntegral",
			Handler:    _IntegralRpc_AddIntegral_Handler,
		},
		{
			MethodName: "ConsumeIntegral",
			Handler:    _IntegralRpc_ConsumeIntegral_Handler,
		},
		{
			MethodName: "FindIntegralByUserid",
			Handler:    _IntegralRpc_FindIntegralByUserid_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "integral.proto",
}
